------------------------------------------------------------
このリポジトリについて
------------------------------------------------------------

このリポジトリは、ロリポップレンタルサーバーなどの「共有サーバー環境」で 
Flask アプリを動かしたい方向けのスタートテンプレートです。

通常、Flask は Gunicorn や uWSGI などの常駐型 WSGI サーバーを使用しますが、
共有サーバーでは権限上、自由に起動できません。
本テンプレートでは、CGI 経由でリクエストごとに Flask を起動する方式を採用しています。

フロントエンドにはデータベースへの登録機能やメールフォームがあり、
ロリポップ環境での MySQL やメール処理の基本的な動作を確認できます。

本テンプレートでは以下の技術を使用します：

・Docker
・MySQL データベースの作成
・Flask マイグレーション

これらの詳しい解説は含まれていません。
そのため、Docker、MySQL、マイグレーションなどの基本操作が
理解できる方を対象としたスターターキットとしてご利用ください。

------------------------------------------------------------
使い方の概要 共通（docker/lolipop）
------------------------------------------------------------

まず、.env ファイルの各項目を正しく入力してください。

------------------------------------------------------------
使い方の概要 共通（docker）
------------------------------------------------------------

.env の入力が完了したら、プロジェクトフォルダで以下のコマンドを順に実行してください。

docker-compose down -v
docker-compose build --no-cache
docker-compose up -d

これで Docker 環境が起動し、ブラウザからアクセスできるようになります。

------------------------------------------------------------
使い方の概要 共通（lolipop）
------------------------------------------------------------

1. 事前に MySQL に必要なデータベース・テーブルを作成しておいてください（Flask-Migrate が利用可能です）
2. .htaccess　.index.cgi　app key static templates をアップしてください。
3. .htaccessのパーミッションは604　.index.cgiのパーミッションは700に設定してください。
4. これでブラウザからアクセスできるようになります。

------------------------------------------------------------
補足：パッケージのインストールについて
------------------------------------------------------------

本テンプレートで使用しているパッケージがサーバーにインストールされていない場合は、  
適宜 SSH 等でインストールを行ってください。  
環境によっては使用可能なパッケージや方法が異なる場合がありますので、ご注意ください。

------------------------------------------------------------
index.cgi について（Flask アプリの起動スクリプト）
------------------------------------------------------------

この `index.cgi` は、CGI 経由で Flask アプリを実行するためのエントリポイントです。

やっていること：

- Flask の `create_app()` 関数を呼び出してアプリを作成
- `wsgiref.handlers.CGIHandler` を使って WSGI アプリを CGI として処理
- `.htaccess` ファイルが無ければ自動で作成（Apache のリライトルール）
- `.env` ファイルを読み込んで、環境変数を設定（例：BASE_PATH）

これによって、共有サーバーでも Flask を動かすことができるようになります。

------------------------------------------------------------
このテンプレートで提供されている主な機能
------------------------------------------------------------

- Flask アプリのエントリポイント（create_app 関数）を提供
- `.env` ファイルから設定情報を読み込み（例：SECRET_KEY、BASE_PATH）
- テンプレートフォルダや CSRF 保護など、基本的な設定を自動適用
- ルーティング用 Blueprint（routes_main）を登録
- 静的ファイルの URL から `/index.cgi` を除去する補助関数 `static_url` を定義
- テンプレートで使えるグローバル変数・関数（site_name、base_path など）を登録
- エラーログを `logs/app.log` に出力（起動時の例外も記録）
- URL を生成・整形する `cleaned_url` 関数を提供
  - BASE_PATH を先頭に付加し、`/index.cgi` を除去した URL を返す
  - 共有サーバー上でも正しいリンク生成が可能
- テスト用ページ `test.html` を提供
  - ユーザー名登録フォーム、全ユーザー削除ボタン
  - 登録済みユーザーの一覧表示
  - 簡易メール送信フォーム
  - フラッシュメッセージによる処理結果の通知
  
- DB 接続確認と初回マイグレーション自動適用（Docker 環境のみ）
  - 空のデータベースには自動でテーブルを作成
  - 共有サーバー環境では、マイグレーションやテーブル作成は手動で行う必要があります

------------------------------------------------------------
免責事項（Disclaimer）
------------------------------------------------------------

このテンプレートは、dockerやロリポップなどの共有サーバー環境で、
Flaskアプリを動かしたい方のために、学習・実験用途として提供しています。

配布者自身も Flask や Python の学習過程にあり、本テンプレートの作成には AI（例：GitHub Copilot や ChatGPT）を
活用しています。そのため、一部のコードは最適解でない可能性があります。

本テンプレートを使用したことによるいかなる損害・トラブルについても、
作成者は一切の責任を負いません。  
利用はすべてご自身の責任にてお願いいたします。

また、サーバー環境や設定によっては動作しない場合があります。  
共有サーバーの仕様変更などにより使えなくなる可能性もありますので、あらかじめご了承ください。
