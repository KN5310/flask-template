------------------------------------------------------------
このリポジトリについて
------------------------------------------------------------

このテンプレートは、Docker とロリポップ共有サーバー環境の両方で動作する Flask テストページを提供しています。
.env に各種認証情報を設定し、環境タイプを切り替えるだけで（lolipop-prod / lolipop-test / docker）、
同じコードベースでどちらの環境でも動作させることが可能です。

このリポジトリは、ロリポップレンタルサーバーの「共有サーバー環境」で
Flask アプリケーションを動かしたい方向けのスタートテンプレートです。

通常 Flask は、Gunicorn や uWSGI などの「WSGIサーバー」を使って動かしますが、
共有サーバーでは権限などの都合上、そういったサーバーを自由に使うことができません。

------------------------------------------------------------
使い方の概要
------------------------------------------------------------

1. このプロジェクト一式を、サーバーのドキュメントルート（公開ディレクトリ）に
   アップロードします。

2. `index.cgi` のファイル権限を「700（実行可能）」に変更します。

3. `.env` ファイル内の `SITE_ROOT_URL` と `BASE_PATH` に、
   実際のドメインやパスを入力します。

4. ブラウザでドメイン（例: https://yourdomain.com）にアクセスすると、
   `.htaccess` ファイルが自動生成されます。

5. Apache の mod_rewrite により、すべてのリクエストが `index.cgi` に送られ、
   Flask アプリが起動し、トップページが表示されます。

------------------------------------------------------------
補足：パッケージのインストールについて
------------------------------------------------------------

本テンプレートで使用しているパッケージがサーバーにインストールされていない場合は、  
適宜 SSH 等でインストールを行ってください。  
環境によっては使用可能なパッケージや方法が異なる場合がありますので、ご注意ください。

------------------------------------------------------------
index.cgi について（Flask アプリの起動スクリプト）
------------------------------------------------------------

この `index.cgi` は、CGI 経由で Flask アプリを実行するためのエントリポイントです。

やっていること：

- Flask の `create_app()` 関数を呼び出してアプリを作成
- `wsgiref.handlers.CGIHandler` を使って WSGI アプリを CGI として処理
- `.htaccess` ファイルが無ければ自動で作成（Apache のリライトルール）
- `.env` ファイルを読み込んで、環境変数を設定（例：BASE_PATH）

これによって、共有サーバーでも Flask を動かすことができるようになります。

------------------------------------------------------------
このテンプレートで提供されている主な機能
------------------------------------------------------------

- Flask アプリのエントリポイント（create_app 関数）を提供
- `.env` ファイルから設定情報を読み込み（例：SECRET_KEY、BASE_PATH）
- テンプレートフォルダや CSRF 保護など、基本的な設定を自動適用
- ルーティング用 Blueprint（routes_main）を登録
- 静的ファイルの URL から `/index.cgi` を除去する補助関数 `static_url` を定義
- テンプレートで使えるグローバル変数・関数（site_name、base_path など）を登録
- エラーログを `logs/app.log` に出力（起動時の例外も記録）
- URL を生成・整形する `cleaned_url` 関数を提供
  - BASE_PATH を先頭に付加し、`/index.cgi` を除去した URL を返す
  - 共有サーバー上でも正しいリンク生成が可能に

■ 補足
- 表示確認のため、CSS を適用して `<h1>` 要素の文字色を変更するテストスクリプトを同梱
- テスト用の `favicon.ico` と サムネイル画像も含まれています（任意で差し替え可能）


------------------------------------------------------------
免責事項（Disclaimer）
------------------------------------------------------------

このテンプレートは、ロリポップなどの共有サーバー環境で Flask アプリを動かしたい方のために、
学習・実験用途として提供しています。

配布者自身も Flask や Python の学習過程にあり、本テンプレートの作成には AI（例：GitHub Copilot や ChatGPT）を
活用しています。そのため、一部のコードは最適解でない可能性があります。

本テンプレートを使用したことによるいかなる損害・トラブルについても、
作成者は一切の責任を負いません。  
利用はすべてご自身の責任にてお願いいたします。

また、サーバー環境や設定によっては動作しない場合があります。  
共有サーバーの仕様変更などにより使えなくなる可能性もありますので、あらかじめご了承ください。
